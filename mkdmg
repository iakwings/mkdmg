#!/bin/sh

# Copyright (C) 2019 Jak.W https://github.com/jakwings/mkdmg
#
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.

# References:
# * http://newosxbook.com/DMG.html
# * https://en.wikipedia.org/wiki/.DS_Store
# * https://wiki.mozilla.org/DS_Store_File_Format
# * https://metacpan.org/pod/DSStoreFormat
# * https://0day.work/parsing-the-ds_store-file-format/

set -euf; unset -v IFS; export LC_ALL=C

help() {
  printf '%s' 'mkdmg version 1.3.0

USAGE
    mkdmg [options] <source> <output.dmg>

    Create a read-only disk image for MacOS.
    The dmg file stores all contents of a directory or a file.

    Some sources are treated as files:
      [!.]*.{app,bundle,dictionary,framework,kext,plugin}

OPTIONS
    -h, --help        Show this manual.
    --volname <name>  Set the name of the mounted volume.
    --volicon <path>  Set the icon of the mounted volume.
    --no-compression  Keep the image data uncompressed.
'
}

echo() {
  printf '%s\n' "$*"
}
ekho() {
  printf '[ERROR] %s\n' "$*"
}
die() {
  if [ 0 -lt "$#" ]; then ekho "$*" >&2; fi
  exit 1
}

case_in() {
  eval "! case \"\$1\" in (${2:-\"\"}) false; esac"
}

on_exit() {
  exitcode="$?"
  if [ '' != "${conf_dst-}" ]; then
    rm -v -f -- "${conf_dst}.sparseimage"
    if [ -e "${conf_dst}.mounted" ]; then
      hdiutil detach "${conf_dst}.mounted"
    fi
  fi
  if [ 0 -ne "${exitcode}" ]; then
    die 'mkdmg exited abnormally'
  fi
}
trap on_exit EXIT

#main() (
  # parse arguments
  #{
    unset -v conf_src conf_dst conf_fmt conf_name conf_icon
    arg_n=0 arg='' argind=0
    while [ 0 -lt "$#" ]; do
      arg="$1"; shift
      argind="$(( argind + 1 ))"
      case "${arg}" in
        (--help|-h|-help|-\?)
          help
          exit
          ;;
        (--volname=*)
          conf_name="${arg#*=}"
          ;;
        (--volname)
          if [ 0 -lt "$#" ]; then
            conf_name="$1"; shift
          else
            die "missing value for option \"${arg}\""
          fi
          ;;
        (--volicon=*)
          conf_icon="${arg#*=}"
          ;;
        (--volicon)
          if [ 0 -lt "$#" ]; then
            conf_icon="$1"; shift
          else
            die "missing value for option \"${arg}\""
          fi
          ;;
        (--no-compression)
          conf_fmt=UDRO
          ;;
        (--)
          while [ 0 -lt "$#" ]; do
            eval "arg_$(( arg_n += 1 ))=\"\$1\""; shift
          done
          ;;
        (-?*)
          die "unrecognized option at #${argind}: \"${arg}\""
          ;;
        (*)
          eval "arg_$(( arg_n += 1 ))=\"\${arg}\""
      esac
    done

    conf_src="${arg_1-}"
    conf_dst="${arg_2-}"

    if [ xx != "${arg_1+x}${arg_2+x}" ]; then
      {
        help
        echo ''
        die 'missing source or destination'
      } >&2
    elif ! [ -e "${conf_src-}" ]; then
      die "invalid source \"${conf_src-}\""
    elif [ '' = "${conf_dst-}" ]; then
      die "empty dmg filename \"${conf_dst-}\""
    elif case_in "${conf_dst}" '*/'; then
      die "dmg filename ended with a slash \"/\""
    elif [ '' != "${conf_icon-}" ] && ! [ -e "${conf_icon}" ]; then
      die "icon not found: \"${conf_icon}\""
    else
      mime="$(file --mime-type -- "${conf_icon}")"
      case "${mime##*[:[:space:]]}" in
        (image/x-icns) true ;;
        # NOTE: invalid icon renders the disk icon transparent
        (*) ekho "icon not in ICNS format: \"${conf_icon}\"" >&2
      esac
    fi

    case "${conf_dst}" in
      (*.[Dd][Mm][Gg]) conf_dst="${conf_dst%????}.dmg" ;;
      (*) conf_dst="${conf_dst}.dmg"
    esac
    if [ '' = "${conf_name-}" ]; then
      conf_name="${conf_dst##*/}"
      conf_name="${conf_name%.dmg}"
    fi

    conf_fmt="${conf_fmt:-UDZO}"
    conf_icon="${conf_icon:-}"

    # hdiutil, SetFile, ditto -- sucks --
    if ! case_in "${conf_src}" '.|..|/*|./*|../*|""'; then
      conf_src="./${conf_src}"
    fi
    if ! case_in "${conf_dst}" '.|..|/*|./*|../*|""'; then
      conf_dst="./${conf_dst}"
    fi
  #}

  # create dmg
  #{
    exec >&2

    if [ -e "${conf_dst}" ]; then
      printf '%s' "Delete previous dmg file \"${conf_dst}\" ? [y/N] " >&2
      if IFS='' read -r reply && case_in "${reply}" '[yY]*'; then
        rm -f -R -- "${conf_dst}"
      else
        echo 'Get back to me when you are ready.'
        echo 'Bye.'
        die
      fi
    fi

    dir="$(dirname -- "${conf_dst}")"
    available="$(/bin/df -P -- "${dir}" | tail -n1 | awk '{print $4}')"
    hdiutil create -fs HFSX -fsargs '-c c=64,a=16,e=16' -layout NONE -scrub \
                   -uid 99 -gid 99 -mode 0755 \
                   -type SPARSE -size "${available}b" \
                   -volname "${conf_name}" \
                   "${conf_dst}.sparseimage"

    hdiutil attach -quiet -noverify -noautoopen \
                   -mount required -mountpoint "${conf_dst}.mounted" \
                   "${conf_dst}.sparseimage"

    ditto_flags='--norsrc --noextattr --noacl --noqtn'
    if [ -d "${conf_src}" ] && \
      case "$(basename -- "${conf_src}")" in
        ([!.]*.[Aa][Pp][Pp]) true ;;
        ([!.]*.[Bb][Uu][Nn][Dd][Ll][Ee]) true ;;
        ([!.]*.[Dd][Ii][Cc][Tt][Ii][Oo][Nn][Aa][Rr][Yy]) true ;;
        ([!.]*.[Ff][Rr][Aa][Mm][Ee][Ww][Oo][Rr][Kk]) true ;;
        ([!.]*.[Kk][Ee][Xx][Tt]) true ;;
        ([!.]*.[Pp][Ll][Uu][Gg][Ii][Nn]) true ;;
        (*) false
      esac
    then
      ditto $ditto_flags --keepParent -c -- "${conf_src}" - \
        | ditto $ditto_flags -x -- - "${conf_dst}.mounted/"
    else
      ditto $ditto_flags -- "${conf_src}" "${conf_dst}.mounted/"
    fi

    if [ '' != "${conf_icon}" ]; then
      if [ -e "${conf_dst}.mounted/.VolumeIcon.icns" ]; then
        rm -f -R -- "${conf_dst}.mounted/.VolumeIcon.icns"
      fi
      /bin/cp -X -- "${conf_icon}" "${conf_dst}.mounted/.VolumeIcon.icns"
      touch -r "${conf_icon}" -- "${conf_dst}.mounted/.VolumeIcon.icns"
      SetFile -a C "${conf_dst}.mounted"  # activate .VolumeIcon.icns
    fi

    hdiutil detach -quiet "${conf_dst}.mounted"
    while lsof -- "${conf_dst}.sparseimage"; do sleep 1; done

    # avoid leaking your $available disk size
    hdiutil resize -sectors min "${conf_dst}.sparseimage"

    format_flags=''
    if [ UDZO = "${conf_fmt}" ]; then
      format_flags='-imagekey zlib-level=9'
    fi
    hdiutil convert -format "${conf_fmt}" $format_flags \
                    -o "${conf_dst}" "${conf_dst}.sparseimage"

    rm -- "${conf_dst}.sparseimage"
  #}
#)
